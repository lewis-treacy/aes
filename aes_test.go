package aes

import (
	"errors"
	"fmt"
	"testing"
)

var testCypher1 Cypher = Cypher{
	[]byte{
		0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6,
		0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C,
	},
	[]byte{
		0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C,
		0xA0, 0xFA, 0xFE, 0x17, 0x88, 0x54, 0x2C, 0xB1, 0x23, 0xA3, 0x39, 0x39, 0x2A, 0x6C, 0x76, 0x05,
		0xF2, 0xC2, 0x95, 0xF2, 0x7A, 0x96, 0xB9, 0x43, 0x59, 0x35, 0x80, 0x7A, 0x73, 0x59, 0xF6, 0x7F,
		0x3D, 0x80, 0x47, 0x7D, 0x47, 0x16, 0xFE, 0x3E, 0x1E, 0x23, 0x7E, 0x44, 0x6D, 0x7A, 0x88, 0x3B,
		0xEF, 0x44, 0xA5, 0x41, 0xA8, 0x52, 0x5B, 0x7F, 0xB6, 0x71, 0x25, 0x3B, 0xDB, 0x0B, 0xAD, 0x00,
		0xD4, 0xD1, 0xC6, 0xF8, 0x7C, 0x83, 0x9D, 0x87, 0xCA, 0xF2, 0xB8, 0xBC, 0x11, 0xF9, 0x15, 0xBC,
		0x6D, 0x88, 0xA3, 0x7A, 0x11, 0x0B, 0x3E, 0xFD, 0xDB, 0xF9, 0x86, 0x41, 0xCA, 0x00, 0x93, 0xFD,
		0x4E, 0x54, 0xF7, 0x0E, 0x5F, 0x5F, 0xC9, 0xF3, 0x84, 0xA6, 0x4F, 0xB2, 0x4E, 0xA6, 0xDC, 0x4F,
		0xEA, 0xD2, 0x73, 0x21, 0xB5, 0x8D, 0xBA, 0xD2, 0x31, 0x2B, 0xF5, 0x60, 0x7F, 0x8D, 0x29, 0x2F,
		0xAC, 0x77, 0x66, 0xF3, 0x19, 0xFA, 0xDC, 0x21, 0x28, 0xD1, 0x29, 0x41, 0x57, 0x5C, 0x00, 0x6E,
		0xD0, 0x14, 0xF9, 0xA8, 0xC9, 0xEE, 0x25, 0x89, 0xE1, 0x3F, 0x0C, 0xC8, 0xB6, 0x63, 0x0C, 0xA6,
	}, 10,
}

var testCypher2 Cypher = Cypher{
	[]byte{
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	},
	[]byte{
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
		0xD6, 0xAA, 0x74, 0xFD, 0xD2, 0xAF, 0x72, 0xFA, 0xDA, 0xA6, 0x78, 0xF1, 0xD6, 0xAB, 0x76, 0xFE,
		0xB6, 0x92, 0xCF, 0x0B, 0x64, 0x3D, 0xBD, 0xF1, 0xBE, 0x9B, 0xC5, 0x00, 0x68, 0x30, 0xB3, 0xFE,
		0xB6, 0xFF, 0x74, 0x4E, 0xD2, 0xC2, 0xC9, 0xBF, 0x6C, 0x59, 0x0C, 0xBF, 0x04, 0x69, 0xBF, 0x41,
		0x47, 0xF7, 0xF7, 0xBC, 0x95, 0x35, 0x3E, 0x03, 0xF9, 0x6C, 0x32, 0xBC, 0xFD, 0x05, 0x8D, 0xFD,
		0x3C, 0xAA, 0xA3, 0xE8, 0xA9, 0x9F, 0x9D, 0xEB, 0x50, 0xF3, 0xAF, 0x57, 0xAD, 0xF6, 0x22, 0xAA,
		0x5E, 0x39, 0x0F, 0x7D, 0xF7, 0xA6, 0x92, 0x96, 0xA7, 0x55, 0x3D, 0xC1, 0x0A, 0xA3, 0x1F, 0x6B,
		0x14, 0xF9, 0x70, 0x1A, 0xE3, 0x5F, 0xE2, 0x8C, 0x44, 0x0A, 0xDF, 0x4D, 0x4E, 0xA9, 0xC0, 0x26,
		0x47, 0x43, 0x87, 0x35, 0xA4, 0x1C, 0x65, 0xB9, 0xE0, 0x16, 0xBA, 0xF4, 0xAE, 0xBF, 0x7A, 0xD2,
		0x54, 0x99, 0x32, 0xD1, 0xF0, 0x85, 0x57, 0x68, 0x10, 0x93, 0xED, 0x9C, 0xBE, 0x2C, 0x97, 0x4E,
		0x13, 0x11, 0x1D, 0x7F, 0xE3, 0x94, 0x4A, 0x17, 0xF3, 0x07, 0xA7, 0x8B, 0x4D, 0x2B, 0x30, 0xC5,
	}, 10,
}

var testCypher3 Cypher = Cypher{
	[]byte{
		0x00, 0xFF, 0x01, 0xFE, 0x02, 0xFD, 0x03, 0xFC,
		0x04, 0xFB, 0x05, 0xFA, 0x06, 0xF9, 0x07, 0xF8,
		0x08, 0xF7, 0x09, 0xF6, 0x0A, 0xF5, 0x0B, 0xF4,
		0x0C, 0xF3, 0x0D, 0xF2, 0x0E, 0xF1, 0x0F, 0xF0,
	},
	[]byte{
		0x00, 0xFF, 0x01, 0xFE, 0x02, 0xFD, 0x03, 0xFC, 0x04, 0xFB, 0x05, 0xFA, 0x06, 0xF9, 0x07, 0xF8,
		0x08, 0xF7, 0x09, 0xF6, 0x0A, 0xF5, 0x0B, 0xF4, 0x0C, 0xF3, 0x0D, 0xF2, 0x0E, 0xF1, 0x0F, 0xF0,
		0xA0, 0x89, 0x8D, 0x55, 0xA2, 0x74, 0x8E, 0xA9, 0xA6, 0x8F, 0x8B, 0x53, 0xA0, 0x76, 0x8C, 0xAB,
		0xE8, 0xCF, 0x6D, 0x94, 0xE2, 0x3A, 0x66, 0x60, 0xEE, 0xC9, 0x6B, 0x92, 0xE0, 0x38, 0x64, 0x62,
		0xA5, 0xCA, 0x27, 0xB4, 0x07, 0xBE, 0xA9, 0x1D, 0xA1, 0x31, 0x22, 0x4E, 0x01, 0x47, 0xAE, 0xE5,
		0x94, 0x6F, 0x89, 0x4D, 0x76, 0x55, 0xEF, 0x2D, 0x98, 0x9C, 0x84, 0xBF, 0x78, 0xA4, 0xE0, 0xDD,
		0xE8, 0x2B, 0xE6, 0x08, 0xEF, 0x95, 0x4F, 0x15, 0x4E, 0xA4, 0x6D, 0x5B, 0x4F, 0xE3, 0xC3, 0xBE,
		0x10, 0x7E, 0xA7, 0xE3, 0x66, 0x2B, 0x48, 0xCE, 0xFE, 0xB7, 0xCC, 0x71, 0x86, 0x13, 0x2C, 0xAC,
		0x9D, 0x5A, 0x77, 0x4C, 0x72, 0xCF, 0x38, 0x59, 0x3C, 0x6B, 0x55, 0x02, 0x73, 0x88, 0x96, 0xBC,
		0x9F, 0xBA, 0x37, 0x86, 0xF9, 0x91, 0x7F, 0x48, 0x07, 0x26, 0xB3, 0x39, 0x81, 0x35, 0x9F, 0x95,
		0x1B, 0x81, 0x5D, 0x40, 0x69, 0x4E, 0x65, 0x19, 0x55, 0x25, 0x30, 0x1B, 0x26, 0xAD, 0xA6, 0xA7,
		0x68, 0x2F, 0x13, 0xDA, 0x91, 0xBE, 0x6C, 0x92, 0x96, 0x98, 0xDF, 0xAB, 0x17, 0xAD, 0x40, 0x3E,
		0xAE, 0x88, 0xEF, 0xB0, 0xC7, 0xC6, 0x8A, 0xA9, 0x92, 0xE3, 0xBA, 0xB2, 0xB4, 0x4E, 0x1C, 0x15,
		0xE5, 0x00, 0x8F, 0x83, 0x74, 0xBE, 0xE3, 0x11, 0xE2, 0x26, 0x3C, 0xBA, 0xF5, 0x8B, 0x7C, 0x84,
		0xD3, 0x98, 0xB0, 0x56, 0x14, 0x5E, 0x3A, 0xFF, 0x86, 0xBD, 0x80, 0x4D, 0x32, 0xF3, 0x9C, 0x58,
	}, 14,
}

func TestRotw(t *testing.T) {
	for _, c := range []struct {
		in   []byte
		want []byte
	}{
		{[]byte{0x00, 0x01, 0x02, 0x03}, []byte{0x01, 0x02, 0x03, 0x00}},
		{[]byte{0xFF, 0xFE, 0xFD, 0xFC}, []byte{0xFE, 0xFD, 0xFC, 0xFF}},
	} {
		got := make([]byte, len(c.in))
		copy(got, c.in)
		rotw(got)
		if ok, err := compareBytes(got, c.want); !ok {
			t.Errorf("rotw(0x%08X)=0x%08X, want 0x%08X: %q", c.in, got, c.want, err.Error())
		}
	}
}

func TestGetSboxSub(t *testing.T) {
	for _, c := range []struct {
		in   byte
		want byte
	}{
		{0x00, 0x63},
		{0xFF, 0x16},
		{0x69, 0xF9},
		{0xF9, 0x99},
	} {
		got := getSboxSub(c.in)
		if got != c.want {
			t.Errorf("getSboxSub(0x%02X) = 0x%02X, want 0x%02X", c.in, got, c.want)
		}
	}
}

func TestGetInvSboxSub(t *testing.T) {
	for _, c := range []struct {
		in   byte
		want byte
	}{
		{0x63, 0x00},
		{0x16, 0xFF},
		{0xF9, 0x69},
		{0x99, 0xF9},
	} {
		got := getInvSboxSub(c.in)
		if got != c.want {
			t.Errorf("getInvSboxSub(0x%02X) = 0x%02X, want 0x%02X", c.in, got, c.want)
		}
	}
}

func TestSubBytes(t *testing.T) {
	for _, c := range []struct {
		in   []byte
		want []byte
	}{
		{[]byte{0x00, 0x01, 0x02, 0x03}, []byte{0x63, 0x7C, 0x77, 0x7B}},
		{[]byte{0xFF, 0xFE, 0xFD, 0xFC}, []byte{0x16, 0xBB, 0x54, 0xB0}},

		{[]byte{
			0x9B, 0xA3, 0x54, 0x11, 0x8E, 0x69, 0x25, 0xAF, 0xA5, 0x1A, 0x8B, 0x5F, 0x20, 0x67, 0xFC, 0xDE,
		}, []byte{
			0x14, 0x0A, 0x20, 0x82, 0x19, 0xF9, 0x3F, 0x79, 0x06, 0xA2, 0x3D, 0xCF, 0xB7, 0x85, 0xB0, 0x1D,
		}},
	} {
		got := make([]byte, len(c.in))
		copy(got, c.in)
		subBytes(got)
		if ok, err := compareBytes(got, c.want); !ok {
			t.Errorf("subBytes(0x%X)=0x%X, want 0x%X: %q", c.in, got, c.want, err.Error())
		}
	}
}

func TestSubBytesInv(t *testing.T) {
	for _, c := range []struct {
		in   []byte
		want []byte
	}{
		{[]byte{0x63, 0x7C, 0x77, 0x7B}, []byte{0x00, 0x01, 0x02, 0x03}},
		{[]byte{0x16, 0xBB, 0x54, 0xB0}, []byte{0xFF, 0xFE, 0xFD, 0xFC}},

		{[]byte{
			0x14, 0x0A, 0x20, 0x82, 0x19, 0xF9, 0x3F, 0x79, 0x06, 0xA2, 0x3D, 0xCF, 0xB7, 0x85, 0xB0, 0x1D,
		}, []byte{
			0x9B, 0xA3, 0x54, 0x11, 0x8E, 0x69, 0x25, 0xAF, 0xA5, 0x1A, 0x8B, 0x5F, 0x20, 0x67, 0xFC, 0xDE,
		}},
	} {
		got := make([]byte, len(c.in))
		copy(got, c.in)
		subBytesInv(got)
		if ok, err := compareBytes(got, c.want); !ok {
			t.Errorf("subBytesInv(0x%X)=0x%X, want 0x%X: %q", c.in, got, c.want, err.Error())
		}
	}
}

func TestGetRcon(t *testing.T) {
	for _, c := range []struct {
		in   int
		want byte
	}{
		{1, 0x01},
		{10, 0x36},
		{7, 0x40},
	} {
		got := getRcon(c.in)
		if got != c.want {
			t.Errorf("getRcon(%d) = 0x%02X, want 0x%02X", c.in, got, c.want)
		}
	}
}

func TestExpandKey(t *testing.T) {
	for _, c := range []struct {
		in   []byte
		want []byte
	}{
		{[]byte{
			0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6,
			0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C,
		}, []byte{
			0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C,
			0xA0, 0xFA, 0xFE, 0x17, 0x88, 0x54, 0x2C, 0xB1, 0x23, 0xA3, 0x39, 0x39, 0x2A, 0x6C, 0x76, 0x05,
			0xF2, 0xC2, 0x95, 0xF2, 0x7A, 0x96, 0xB9, 0x43, 0x59, 0x35, 0x80, 0x7A, 0x73, 0x59, 0xF6, 0x7F,
			0x3D, 0x80, 0x47, 0x7D, 0x47, 0x16, 0xFE, 0x3E, 0x1E, 0x23, 0x7E, 0x44, 0x6D, 0x7A, 0x88, 0x3B,
			0xEF, 0x44, 0xA5, 0x41, 0xA8, 0x52, 0x5B, 0x7F, 0xB6, 0x71, 0x25, 0x3B, 0xDB, 0x0B, 0xAD, 0x00,
			0xD4, 0xD1, 0xC6, 0xF8, 0x7C, 0x83, 0x9D, 0x87, 0xCA, 0xF2, 0xB8, 0xBC, 0x11, 0xF9, 0x15, 0xBC,
			0x6D, 0x88, 0xA3, 0x7A, 0x11, 0x0B, 0x3E, 0xFD, 0xDB, 0xF9, 0x86, 0x41, 0xCA, 0x00, 0x93, 0xFD,
			0x4E, 0x54, 0xF7, 0x0E, 0x5F, 0x5F, 0xC9, 0xF3, 0x84, 0xA6, 0x4F, 0xB2, 0x4E, 0xA6, 0xDC, 0x4F,
			0xEA, 0xD2, 0x73, 0x21, 0xB5, 0x8D, 0xBA, 0xD2, 0x31, 0x2B, 0xF5, 0x60, 0x7F, 0x8D, 0x29, 0x2F,
			0xAC, 0x77, 0x66, 0xF3, 0x19, 0xFA, 0xDC, 0x21, 0x28, 0xD1, 0x29, 0x41, 0x57, 0x5C, 0x00, 0x6E,
			0xD0, 0x14, 0xF9, 0xA8, 0xC9, 0xEE, 0x25, 0x89, 0xE1, 0x3F, 0x0C, 0xC8, 0xB6, 0x63, 0x0C, 0xA6,
		}},

		{[]byte{
			0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52,
			0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90, 0x79, 0xE5,
			0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B,
		}, []byte{
			0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52, 0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90, 0x79, 0xE5,
			0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B, 0xFE, 0x0C, 0x91, 0xF7, 0x24, 0x02, 0xF5, 0xA5,
			0xEC, 0x12, 0x06, 0x8E, 0x6C, 0x82, 0x7F, 0x6B, 0x0E, 0x7A, 0x95, 0xB9, 0x5C, 0x56, 0xFE, 0xC2,
			0x4D, 0xB7, 0xB4, 0xBD, 0x69, 0xB5, 0x41, 0x18, 0x85, 0xA7, 0x47, 0x96, 0xE9, 0x25, 0x38, 0xFD,
			0xE7, 0x5F, 0xAD, 0x44, 0xBB, 0x09, 0x53, 0x86, 0x48, 0x5A, 0xF0, 0x57, 0x21, 0xEF, 0xB1, 0x4F,
			0xA4, 0x48, 0xF6, 0xD9, 0x4D, 0x6D, 0xCE, 0x24, 0xAA, 0x32, 0x63, 0x60, 0x11, 0x3B, 0x30, 0xE6,
			0xA2, 0x5E, 0x7E, 0xD5, 0x83, 0xB1, 0xCF, 0x9A, 0x27, 0xF9, 0x39, 0x43, 0x6A, 0x94, 0xF7, 0x67,
			0xC0, 0xA6, 0x94, 0x07, 0xD1, 0x9D, 0xA4, 0xE1, 0xEC, 0x17, 0x86, 0xEB, 0x6F, 0xA6, 0x49, 0x71,
			0x48, 0x5F, 0x70, 0x32, 0x22, 0xCB, 0x87, 0x55, 0xE2, 0x6D, 0x13, 0x52, 0x33, 0xF0, 0xB7, 0xB3,
			0x40, 0xBE, 0xEB, 0x28, 0x2F, 0x18, 0xA2, 0x59, 0x67, 0x47, 0xD2, 0x6B, 0x45, 0x8C, 0x55, 0x3E,
			0xA7, 0xE1, 0x46, 0x6C, 0x94, 0x11, 0xF1, 0xDF, 0x82, 0x1F, 0x75, 0x0A, 0xAD, 0x07, 0xD7, 0x53,
			0xCA, 0x40, 0x05, 0x38, 0x8F, 0xCC, 0x50, 0x06, 0x28, 0x2D, 0x16, 0x6A, 0xBC, 0x3C, 0xE7, 0xB5,
			0xE9, 0x8B, 0xA0, 0x6F, 0x44, 0x8C, 0x77, 0x3C, 0x8E, 0xCC, 0x72, 0x04, 0x01, 0x00, 0x22, 0x02,
		}},

		{[]byte{
			0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE,
			0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81,
			0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7,
			0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4,
		}, []byte{
			0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE, 0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81,
			0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7, 0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4,
			0x9B, 0xA3, 0x54, 0x11, 0x8E, 0x69, 0x25, 0xAF, 0xA5, 0x1A, 0x8B, 0x5F, 0x20, 0x67, 0xFC, 0xDE,
			0xA8, 0xB0, 0x9C, 0x1A, 0x93, 0xD1, 0x94, 0xCD, 0xBE, 0x49, 0x84, 0x6E, 0xB7, 0x5D, 0x5B, 0x9A,
			0xD5, 0x9A, 0xEC, 0xB8, 0x5B, 0xF3, 0xC9, 0x17, 0xFE, 0xE9, 0x42, 0x48, 0xDE, 0x8E, 0xBE, 0x96,
			0xB5, 0xA9, 0x32, 0x8A, 0x26, 0x78, 0xA6, 0x47, 0x98, 0x31, 0x22, 0x29, 0x2F, 0x6C, 0x79, 0xB3,
			0x81, 0x2C, 0x81, 0xAD, 0xDA, 0xDF, 0x48, 0xBA, 0x24, 0x36, 0x0A, 0xF2, 0xFA, 0xB8, 0xB4, 0x64,
			0x98, 0xC5, 0xBF, 0xC9, 0xBE, 0xBD, 0x19, 0x8E, 0x26, 0x8C, 0x3B, 0xA7, 0x09, 0xE0, 0x42, 0x14,
			0x68, 0x00, 0x7B, 0xAC, 0xB2, 0xDF, 0x33, 0x16, 0x96, 0xE9, 0x39, 0xE4, 0x6C, 0x51, 0x8D, 0x80,
			0xC8, 0x14, 0xE2, 0x04, 0x76, 0xA9, 0xFB, 0x8A, 0x50, 0x25, 0xC0, 0x2D, 0x59, 0xC5, 0x82, 0x39,
			0xDE, 0x13, 0x69, 0x67, 0x6C, 0xCC, 0x5A, 0x71, 0xFA, 0x25, 0x63, 0x95, 0x96, 0x74, 0xEE, 0x15,
			0x58, 0x86, 0xCA, 0x5D, 0x2E, 0x2F, 0x31, 0xD7, 0x7E, 0x0A, 0xF1, 0xFA, 0x27, 0xCF, 0x73, 0xC3,
			0x74, 0x9C, 0x47, 0xAB, 0x18, 0x50, 0x1D, 0xDA, 0xE2, 0x75, 0x7E, 0x4F, 0x74, 0x01, 0x90, 0x5A,
			0xCA, 0xFA, 0xAA, 0xE3, 0xE4, 0xD5, 0x9B, 0x34, 0x9A, 0xDF, 0x6A, 0xCE, 0xBD, 0x10, 0x19, 0x0D,
			0xFE, 0x48, 0x90, 0xD1, 0xE6, 0x18, 0x8D, 0x0B, 0x04, 0x6D, 0xF3, 0x44, 0x70, 0x6C, 0x63, 0x1E,
		}},
	} {
		got := expandKey(c.in)
		if ok, err := compareBytes(got, c.want); !ok {
			t.Errorf("expandKey(%X) failed: %q", c.in, err.Error())
		}
	}
}

func TestAddRoundKey(t *testing.T) {
	for _, c := range []struct {
		in_s []byte
		in_w []byte
		want []byte
	}{
		{[]byte{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
		}, []byte{
			0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE, 0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81,
		}, []byte{
			0x60, 0x3C, 0xE9, 0x13, 0x11, 0xCF, 0x77, 0xB9, 0x23, 0x7A, 0xA4, 0xFB, 0x89, 0x70, 0x79, 0x8E,
		}},

		{[]byte{
			0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8, 0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0,
		}, []byte{
			0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7, 0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4,
		}, []byte{
			0xE0, 0xCB, 0xD1, 0xFB, 0xC0, 0x9B, 0xF1, 0x2F, 0xDA, 0x6E, 0xE5, 0x57, 0xFA, 0xE6, 0x2E, 0x04,
		}},

		{[]byte{
			0x9B, 0xA3, 0x54, 0x11, 0x8E, 0x69, 0x25, 0xAF, 0xA5, 0x1A, 0x8B, 0x5F, 0x20, 0x67, 0xFC, 0xDE,
		}, []byte{
			0xA8, 0xB0, 0x9C, 0x1A, 0x93, 0xD1, 0x94, 0xCD, 0xBE, 0x49, 0x84, 0x6E, 0xB7, 0x5D, 0x5B, 0x9A,
		}, []byte{
			0x33, 0x13, 0xC8, 0x0B, 0x1D, 0xB8, 0xb1, 0x62, 0x1B, 0x53, 0x0F, 0x31, 0x97, 0x3A, 0xA7, 0x44,
		}},
	} {
		got := make([]byte, len(c.in_s))
		copy(got, c.in_s)
		addRoundKey(got, c.in_w)
		if ok, err := compareBytes(got, c.want); !ok {
			t.Errorf("addRoundKey(0x%32X, 0x%32X)=0x%32X, want 0x%32X: %q", c.in_s, c.in_w, got, c.want, err.Error())
		}
	}
}

func TestShiftRows(t *testing.T) {
	for _, c := range []struct {
		in   []byte
		want []byte
	}{
		{[]byte{
			0x00, 0x01, 0x02, 0x03,
			0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B,
			0x0C, 0x0D, 0x0E, 0x0F,
		}, []byte{
			0x00, 0x05, 0x0A, 0x0F,
			0x04, 0x09, 0x0E, 0x03,
			0x08, 0x0D, 0x02, 0x07,
			0x0C, 0x01, 0x06, 0x0B,
		}},

		{[]byte{
			0xA2, 0x5E, 0x7E, 0xD5,
			0x83, 0xB1, 0xCF, 0x9A,
			0x27, 0xF9, 0x39, 0x43,
			0x6A, 0x94, 0xF7, 0x67,
		}, []byte{
			0xA2, 0xB1, 0x39, 0x67,
			0x83, 0xF9, 0xF7, 0xD5,
			0x27, 0x94, 0x7E, 0x9A,
			0x6A, 0x5E, 0xCF, 0x43,
		}},
	} {
		got := make([]byte, len(c.in))
		copy(got, c.in)
		shiftRows(got)
		if ok, err := compareBytes(got, c.want); !ok {
			t.Errorf("shiftRows(0x%032X)=0x%032X, want 0x%032X: %q", c.in, got, c.want, err.Error())
		}
	}
}

func TestShiftRowsInv(t *testing.T) {
	for _, c := range []struct {
		in   []byte
		want []byte
	}{
		{[]byte{
			0x00, 0x05, 0x0A, 0x0F,
			0x04, 0x09, 0x0E, 0x03,
			0x08, 0x0D, 0x02, 0x07,
			0x0C, 0x01, 0x06, 0x0B,
		}, []byte{
			0x00, 0x01, 0x02, 0x03,
			0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B,
			0x0C, 0x0D, 0x0E, 0x0F,
		}},

		{[]byte{
			0xA2, 0xB1, 0x39, 0x67,
			0x83, 0xF9, 0xF7, 0xD5,
			0x27, 0x94, 0x7E, 0x9A,
			0x6A, 0x5E, 0xCF, 0x43,
		}, []byte{
			0xA2, 0x5E, 0x7E, 0xD5,
			0x83, 0xB1, 0xCF, 0x9A,
			0x27, 0xF9, 0x39, 0x43,
			0x6A, 0x94, 0xF7, 0x67,
		}},
	} {
		got := make([]byte, len(c.in))
		copy(got, c.in)
		shiftRowsInv(got)
		if ok, err := compareBytes(got, c.want); !ok {
			t.Errorf("shiftRowsInv(0x%032X)=0x%032X, want 0x%032X: %q", c.in, got, c.want, err.Error())
		}
	}
}

func TestMixColumns(t *testing.T) {
	for _, c := range []struct {
		in   []byte
		want []byte
	}{
		{[]byte{
			0xD4, 0xBF, 0x5D, 0x30, 0xDB, 0x13, 0x53, 0x45,
			0xF2, 0x0A, 0x22, 0x5C, 0x01, 0x01, 0x01, 0x01,
		}, []byte{
			0x04, 0x66, 0x81, 0xE5, 0x8E, 0x4D, 0xA1, 0xBC,
			0x9F, 0xDC, 0x58, 0x9D, 0x01, 0x01, 0x01, 0x01,
		}},

		{[]byte{
			0xC6, 0xC6, 0xC6, 0xC6, 0xD4, 0xD4, 0xD4, 0xD5,
			0x2D, 0x26, 0x31, 0x4C, 0xD4, 0xBF, 0x5D, 0x30,
		}, []byte{
			0xC6, 0xC6, 0xC6, 0xC6, 0xD5, 0xD5, 0xD7, 0xD6,
			0x4D, 0x7E, 0xBD, 0xF8, 0x04, 0x66, 0x81, 0xE5,
		}},
	} {
		got := make([]byte, len(c.in))
		copy(got, c.in)
		mixColumns(got)
		if ok, err := compareBytes(got, c.want); !ok {
			t.Errorf("mixColumns(0x%032X) = 0x%032X, want 0x%032X: %q", c.in, got, c.want, err.Error())
		}
	}
}

func TestMixColumnsInv(t *testing.T) {
	for _, c := range []struct {
		in   []byte
		want []byte
	}{
		{[]byte{
			0x04, 0x66, 0x81, 0xE5, 0x8E, 0x4D, 0xA1, 0xBC,
			0x9F, 0xDC, 0x58, 0x9D, 0x01, 0x01, 0x01, 0x01,
		}, []byte{
			0xD4, 0xBF, 0x5D, 0x30, 0xDB, 0x13, 0x53, 0x45,
			0xF2, 0x0A, 0x22, 0x5C, 0x01, 0x01, 0x01, 0x01,
		}},

		{[]byte{
			0xC6, 0xC6, 0xC6, 0xC6, 0xD5, 0xD5, 0xD7, 0xD6,
			0x4D, 0x7E, 0xBD, 0xF8, 0x04, 0x66, 0x81, 0xE5,
		}, []byte{
			0xC6, 0xC6, 0xC6, 0xC6, 0xD4, 0xD4, 0xD4, 0xD5,
			0x2D, 0x26, 0x31, 0x4C, 0xD4, 0xBF, 0x5D, 0x30,
		}},
	} {
		got := make([]byte, len(c.in))
		copy(got, c.in)
		mixColumnsInv(got)
		if ok, err := compareBytes(got, c.want); !ok {
			t.Errorf("mixColumnsInv(0x%032X) = 0x%032X, want 0x%032X: %q", c.in, got, c.want, err.Error())
		}
	}
}

func TestEncryptBlock(t *testing.T) {
	for _, c := range []struct {
		cypher *Cypher
		in     []byte
		want   []byte
	}{
		{&testCypher1, []byte{
			0x32, 0x43, 0xF6, 0xA8, 0x88, 0x5A, 0x30, 0x8D,
			0x31, 0x31, 0x98, 0xA2, 0xE0, 0x37, 0x07, 0x34,
		}, []byte{
			0x39, 0x25, 0x84, 0x1D, 0x02, 0xdc, 0x09, 0xFB,
			0xDC, 0x11, 0x85, 0x97, 0x19, 0x6A, 0x0B, 0x32,
		}},
	} {
		got := make([]byte, len(c.in))
		copy(got, c.in)
		c.cypher.encryptBlock(got)
		if ok, err := compareBytes(got, c.want); !ok {
			t.Errorf("encryptBlock(0x%032X, 0x%X) = 0x%032X, want 0x%032X, %q", c.in, c.cypher.key, got, c.want, err.Error())
		}
	}
}

func TestDecryptBlock(t *testing.T) {
	for _, c := range []struct {
		cypher *Cypher
		in     []byte
		want   []byte
	}{
		{&testCypher1, []byte{
			0x39, 0x25, 0x84, 0x1D, 0x02, 0xdc, 0x09, 0xFB,
			0xDC, 0x11, 0x85, 0x97, 0x19, 0x6A, 0x0B, 0x32,
		}, []byte{
			0x32, 0x43, 0xF6, 0xA8, 0x88, 0x5A, 0x30, 0x8D,
			0x31, 0x31, 0x98, 0xA2, 0xE0, 0x37, 0x07, 0x34,
		}},
	} {
		got := make([]byte, len(c.in))
		copy(got, c.in)
		c.cypher.decryptBlock(got)
		if ok, err := compareBytes(got, c.want); !ok {
			t.Errorf("decryptBlock(0x%032X, 0x%X) = 0x%032X, want 0x%032X, %q", c.in, c.cypher.key, got, c.want, err.Error())
		}
	}
}

func TestNewCypher(t *testing.T) {
	for _, c := range []struct {
		in       []byte
		want     *Cypher
		want_err bool
	}{
		{[]byte{
			0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6,
			0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C,
		}, &testCypher1, false},

		{[]byte{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
		}, &testCypher2, false},

		{[]byte{
			0x00, 0xFF, 0x01, 0xFE, 0x02, 0xFD, 0x03, 0xFC,
			0x04, 0xFB, 0x05, 0xFA, 0x06, 0xF9, 0x07, 0xF8,
			0x08, 0xF7, 0x09, 0xF6, 0x0A, 0xF5, 0x0B, 0xF4,
			0x0C, 0xF3, 0x0D, 0xF2, 0x0E, 0xF1, 0x0F, 0xF0,
		}, &testCypher3, false},

		{[]byte{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
		}, nil, true},
	} {
		got, got_err := NewCypher(c.in)
		if got_err != nil {
			if !c.want_err {
				t.Errorf("NewCypher(0x%X) threw unexpected error: %q", c.in, got_err)
			}
			return
		}

		if got_err == nil && c.want_err {
			t.Errorf("NewCypher(0x%X) didn't thow error when expected", c.in, got_err)
			return
		}

		if ok, err := compareCyphers(got, c.want); !ok {
			t.Errorf("NewCypher(0x%X) failed: %q", c.in, err.Error())
			fmt.Println("test")
		}
	}
}

func TestEncrypt(t *testing.T) {
	for _, c := range []struct {
		cypher   *Cypher
		in       []byte
		want     []byte
		want_err bool
	}{
		{&testCypher1, []byte{
			0x32, 0x43, 0xF6, 0xA8, 0x88, 0x5A, 0x30, 0x8D,
			0x31, 0x31, 0x98, 0xA2, 0xE0, 0x37, 0x07, 0x34,
		}, []byte{
			0x39, 0x25, 0x84, 0x1D, 0x02, 0xdc, 0x09, 0xFB,
			0xDC, 0x11, 0x85, 0x97, 0x19, 0x6A, 0x0B, 0x32,
		}, false},

		{&testCypher2, []byte("Hello World!"), []byte{
			0xD4, 0x82, 0xD4, 0x20, 0xAA, 0x67, 0xEA, 0x43,
			0x5D, 0xAF, 0xB6, 0xF4, 0x6E, 0x54, 0xAA, 0x2A,
		}, false},

		{&testCypher3, []byte("This is a super secret message and thus requires a 256 bit key"), []byte{
			0x18, 0xD5, 0xD3, 0x88, 0x19, 0x18, 0x31, 0xF2,
			0x1B, 0xA5, 0x28, 0xB9, 0x6F, 0xF7, 0xC1, 0xD7,
			0x95, 0x7D, 0xF8, 0xC4, 0x5D, 0x3C, 0x43, 0x81,
			0x20, 0xE4, 0xE3, 0x90, 0xF1, 0xF5, 0x98, 0x6F,
			0x97, 0xD9, 0x36, 0x58, 0xC4, 0x35, 0xE4, 0x4F,
			0xE7, 0xD8, 0x29, 0x1E, 0x2C, 0x15, 0x20, 0x97,
			0x2B, 0xF7, 0xC0, 0xB4, 0xF7, 0xF1, 0xE8, 0xE1,
			0xBB, 0x00, 0x21, 0x7C, 0xC2, 0x01, 0x64, 0x87,
		}, false},
	} {
		got, got_err := c.cypher.Encrypt(c.in)
		if got_err != nil {
			if !c.want_err {
				t.Errorf("Encrypt(0x%X, 0x%X) threw unexpected error: %q", c.in, c.cypher.key, got_err)
			}
			return
		}

		if got_err == nil && c.want_err {
			t.Errorf("Encrypt(0x%X, 0x%X) didn't thow error when expected", c.in, c.cypher.key, got_err)
			return
		}

		if ok, err := compareBytes(got, c.want); !ok {
			t.Errorf("Encrypt(0x%X, 0x%X) = 0x%X, want 0x%X, %q", c.in, c.cypher.key, got, c.want, err.Error())
		}
	}
}

func TestRemovePadding(t *testing.T) {
	for _, c := range []struct {
		in   []byte
		want []byte
	}{
		{[]byte{
			0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x00, 0x00,
		}, []byte{
			0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
		}},

		{[]byte{
			0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00,
		}, []byte{
			0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
		}},
	} {
		got := removePadding(c.in)
		if ok, err := compareBytes(got, c.want); !ok {
			t.Errorf("removePadding(0x%X) = 0x%X, want 0x%X: %q", c.in, got, c.want, err)
		}
	}
}

func TestDecrypt(t *testing.T) {
	for _, c := range []struct {
		cypher   *Cypher
		in       []byte
		want     []byte
		want_err bool
	}{
		{&testCypher1, []byte{
			0x39, 0x25, 0x84, 0x1D, 0x02, 0xdc, 0x09, 0xFB,
			0xDC, 0x11, 0x85, 0x97, 0x19, 0x6A, 0x0B, 0x32,
		}, []byte{
			0x32, 0x43, 0xF6, 0xA8, 0x88, 0x5A, 0x30, 0x8D,
			0x31, 0x31, 0x98, 0xA2, 0xE0, 0x37, 0x07, 0x34,
		}, false},

		{&testCypher2, []byte{
			0xD4, 0x82, 0xD4, 0x20, 0xAA, 0x67, 0xEA, 0x43,
			0x5D, 0xAF, 0xB6, 0xF4, 0x6E, 0x54, 0xAA, 0x2A,
		}, []byte("Hello World!"), false},

		{&testCypher3, []byte{
			0x18, 0xD5, 0xD3, 0x88, 0x19, 0x18, 0x31, 0xF2,
			0x1B, 0xA5, 0x28, 0xB9, 0x6F, 0xF7, 0xC1, 0xD7,
			0x95, 0x7D, 0xF8, 0xC4, 0x5D, 0x3C, 0x43, 0x81,
			0x20, 0xE4, 0xE3, 0x90, 0xF1, 0xF5, 0x98, 0x6F,
			0x97, 0xD9, 0x36, 0x58, 0xC4, 0x35, 0xE4, 0x4F,
			0xE7, 0xD8, 0x29, 0x1E, 0x2C, 0x15, 0x20, 0x97,
			0x2B, 0xF7, 0xC0, 0xB4, 0xF7, 0xF1, 0xE8, 0xE1,
			0xBB, 0x00, 0x21, 0x7C, 0xC2, 0x01, 0x64, 0x87,
		}, []byte("This is a super secret message and thus requires a 256 bit key"), false},
	} {
		got, got_err := c.cypher.Decrypt(c.in)
		if got_err != nil {
			if !c.want_err {
				t.Errorf("Decrypt(0x%X, 0x%X) threw unexpected error: %q", c.in, c.cypher.key, got_err)
			}
			return
		}

		if got_err == nil && c.want_err {
			t.Errorf("Decrypt(0x%X, 0x%X) didn't thow error when expected", c.in, c.cypher.key, got_err)
			return
		}

		if ok, err := compareBytes(got, c.want); got_err == nil && !ok {
			t.Errorf("Decrypt(0x%X, 0x%X) = 0x%X, want 0x%X, %q", c.in, c.cypher.key, got, c.want, err.Error())
		}
	}
}

/* UTILS */
func compareBytes(a, b []byte) (bool, error) {
	if len(a) != len(b) {
		return false, errors.New("lengths differ")
	}
	for i, v := range a {
		if v != b[i] {
			return false, errors.New(fmt.Sprintf("index %d, 0x%02X != 0x%02X", i, v, b[i]))
		}
	}
	return true, nil
}

func compareCyphers(a, b *Cypher) (bool, error) {
	if ok, err := compareBytes(a.key, b.key); !ok {
		return false, errors.New(fmt.Sprintf("keys don't match: %s", err.Error()))
	}

	if ok, err := compareBytes(a.xkey, b.xkey); !ok {
		return false, errors.New(fmt.Sprintf("expanded keys don't match: %s", err.Error()))
	}

	if a.rounds != b.rounds {
		return false, errors.New(fmt.Sprintf("rounds don't match a: %d, b: %d", a.rounds, b.rounds))
	}
	return true, nil
}
